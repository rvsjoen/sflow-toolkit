#!/usr/bin/env python2.5
from SimpleXMLRPCServer import SimpleXMLRPCServer
import socket
import time
import sys
import sflowtoolkit
import md5
from sflowdaemon import Daemon

# Create server
server = SimpleXMLRPCServer((socket.getfqdn(), 8000))

logfile = open(sflowtoolkit.sflowconfig['data directory']+"/stxmlrpcd.log", "a");
datadir = sflowtoolkit.sflowconfig['data directory']
htmlurl = sflowtoolkit.sflowconfig['htmlurl']

class MyFuncs:

	def __init__(self):
		global i 
		i = 0

	def get_counter_samples(self, agent, start, end, fields, index): 
		global i 
		logfile.write(time.asctime()+" REQUEST [%u] get_counter_samples(%s, %s, %s, %s, %s) \n"%(i, agent, start, end, fields, index))
		res = sflowtoolkit.get_counterdata(agent, start, end, fields, datadir, index)
		logfile.write(time.asctime()+" REPLY [%u]\n"%i);
		logfile.flush()
		i += 1
		return res

	def get_flow_samples(self, agent, start, end, fields, index):
		global i
		logfile.write(time.asctime()+" REQUEST [%u] get_flow_samples(%s, %s, %s, %s, %s)\n"%(i, agent, start, end, fields, index));
		res = sflowtoolkit.get_flowdata(agent, start, end, fields, datadir, index)
		logfile.write(time.asctime()+" REPLY [%u]\n"%i);
		logfile.flush()
		i += 1
		return res

	def get_conversations(self, agent, start, end, index, type):
		global i
		logfile.write(time.asctime()+" REQUEST [%u] get_conversations(%s, %s, %s, %s, %s)\n"%(i, agent, start, end, index, type));
		res = sflowtoolkit.get_conversations(agent, start, end, datadir, index, type)
		logfile.write(time.asctime()+" REPLY [%u]\n"%i);
		logfile.flush()
		i += 1
		return res

	def get_pcap_link(self, agent, start, end, index):
		m = md5.md5(agent+start+end+index)
		return "%s/sflow_%s.pcap" % (htmlurl, m.hexdigest())

	def get_collector_status(self):
		f = open("%s/rstats"%datadir, "r")
		buf = f.read()
		values = buf.split(",")
		cnt,cnt_f,cnt_c,starttime,bytes,agents = values
		f.close()
		res = "Started: %s, Bytes written: %s, Number of agents: %s, Samples: %s flow, %s cntr, Datagrams: %s)" % (time.ctime(int(starttime)),bytes,agents,cnt_f,cnt_c,cnt)
		return res

	def get_collector_agents(self):
		res = []
		header = ["agent", "flow samples", "counter samples", "last seen", "average sampling rate"]
		res.append(header)
		row = ["0.0.0.0", "0", "0", time.asctime(), "0 samples/sec"]
		res.append(row)
		res.append(row)
		res.append(row)
		res.append(row)
		res.append(row)
		res.append(row)
		return res

server.register_instance(MyFuncs())

class MyDaemon(Daemon):
	def run(self):
		server.serve_forever()

logfile.write(time.asctime()+" Starting XMLRPC service\n")
logfile.flush()

daemon = MyDaemon('/var/run/stxmlrpcd.pid')
daemon.start()
