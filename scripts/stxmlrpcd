#!/usr/bin/env python2.5
from SimpleXMLRPCServer import SimpleXMLRPCServer
import socket
import time
import sys
import sflowtoolkit
from sflowdaemon import Daemon

# Create server
server = SimpleXMLRPCServer((socket.getfqdn(), 8000))

logfile = open(sflowtoolkit.sflowconfig['data directory']+"/stxmlrpcd.log", "a");

class MyFuncs:
	def __init__(self):
		global i 
		i = 0
	def get_cntr_index(self, agent, start, end, fields, index): 
		global i 
		logfile.write(time.asctime()+" REQUEST [%u] get_cntr_index(%s, %s, %s, %s, %s) \n"%(i, agent, start, end, fields, index))
		res = sflowtoolkit.get_counterdata(agent, start, end, fields, datadir, index)
		logfile.write(time.asctime()+" REPLY [%u]\n"%i);
		logfile.flush()
		i += 1
		return res

	def get_flow_switch(self, agent, start, end, fields):
		global i
		logfile.write(time.asctime()+" REQUEST [%u] get_flow_switch(%s, %s, %s, %s)\n"%(i, agent, start, end, fields));
		res = sflowtoolkit.get_flowdata(agent, start, end, fields, datadir, -1)
		logfile.write(time.asctime()+" REPLY [%u]\n"%i);
		logfile.flush()
		i += 1
		return res

	def get_flow_index(self, agent, start, end, fields, index):
		global i
		logfile.write(time.asctime()+" REQUEST [%u] get_flow_index(%s, %s, %s, %s, %s)\n"%(i, agent, start, end, fields, index));
		res = sflowtoolkit.get_flowdata(agent, start, end, fields, datadir, index)
		logfile.write(time.asctime()+" REPLY [%u]\n"%i);
		logfile.flush()
		i += 1
		return res

	def get_conv_switch(self, agent, start, end, records=0):
		global i
		logfile.write(time.asctime()+" REQUEST [%u] get_conv_switch(%s, %s, %s)\n"%(i, agent, start, end));
		res = sflowtoolkit.get_conversations(agent, start, end, datadir, -1)
		if records is not 0:
			res = res[:(1+records)]
		logfile.write(time.asctime()+" REPLY [%u]\n"%i);
		logfile.flush()
		i += 1
		return res

	def get_conv_index(self, agent, start, end, index, records=0):
		global i
		logfile.write(time.asctime()+" REQUEST [%u] get_conv_index(%s, %s, %s, %s)\n"%(i, agent, start, end, index));
		res = sflowtoolkit.get_conversations(agent, start, end, datadir, index)
		if records is not 0:
			res = res[:(1+records)]
		logfile.write(time.asctime()+" REPLY [%u]\n"%i);
		logfile.flush()
		i += 1
		return res

	def get_collector_status(self):
		res = "some general information in a string, uptime, sample rate, byten written etc etc"
		return res

	def get_collector_agents(self):
		res = ["a table with each agent, number of samples, last seen, etc, etc","row2","row3","row4"]
		return res

server.register_instance(MyFuncs())

class MyDaemon(Daemon):
	def run(self):
		server.serve_forever()

logfile.write(time.asctime()+" Starting XMLRPC service\n")
logfile.flush()

daemon = MyDaemon('/var/run/stxmlrpcd.pid')
daemon.start()
